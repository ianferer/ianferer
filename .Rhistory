goals = g.json[["liveData"]][["plays"]][["allPlays"]][["about"]][["goals"]],
period = g.json[["liveData"]][["plays"]][["allPlays"]][["about"]][["period"]],
time = g.json[["liveData"]][["plays"]][["allPlays"]][["about"]][["periodTimeRemaining"]]) %>%
mutate(time = (60 * 20 * period) - as.numeric(seconds(ms(time))))
game.all.times <- e.times %>%
filter(event %in% c("Shot", "Goal")) %>%
filter(period <= 3) %>%
group_by(season, game_id, home.team, away.team) %>%
expand(time = 0:3600) %>%
mutate(time.left = 3600 - time)
game.shot.times <- e.times %>%
filter(event %in% c("Shot", "Goal")) %>%
filter(period <= 3) %>%
mutate(goalie = ifelse(is.na(goalie),
ifelse(as.character(team) == as.character(home.team),
as.character(away.goalie),
as.character(home.goalie)),
as.character(goalie)),
home.shot = as.numeric(as.character(team) == as.character(home.team)),
away.shot = as.numeric(as.character(team) == as.character(away.team)),
H1.shot = as.numeric(away.shot &
as.character(goalie) == as.character(g.H1)),
H2.shot = as.numeric(away.shot &
as.character(goalie) == as.character(g.H2)),
A1.shot = as.numeric(home.shot &
as.character(goalie) == as.character(g.A1)),
A2.shot = as.numeric(home.shot &
as.character(goalie) == as.character(g.A2)),
H1.goal = as.numeric(H1.shot & event == "Goal"),
H2.goal = as.numeric(H2.shot & event == "Goal"),
A1.goal = as.numeric(A1.shot & event == "Goal"),
A2.goal = as.numeric(A2.shot & event == "Goal")) %>%
group_by(season, game_id, home.team, away.team) %>%
summarise(home.goalie = home.goalie,
away.goalie = away.goalie,
g.H1 = g.H1,
g.H2 = g.H2,
g.A1 = g.A1,
g.A2 = g.A2,
time = time,
event = event,
home.goals = goals.home,
away.goals = goals.away,
home.shots = cumsum(home.shot),
away.shots = cumsum(away.shot),
H1.shots = cumsum(H1.shot),
H2.shots = cumsum(H2.shot),
A1.shots = cumsum(A1.shot),
A2.shots = cumsum(A2.shot),
H1.goals = cumsum(H1.goal),
H2.goals = cumsum(H2.goal),
A1.goals = cumsum(A1.goal),
A2.goals = cumsum(A2.goal),
.groups = "drop") %>%
select(-event) %>%
mutate(d.score = home.goals - away.goals,
home.team = team.replace(as.character(home.team)),
away.team = team.replace(as.character(away.team)),
home.goalie = as.character(home.goalie),
away.goalie = as.character(away.goalie),
g.H1 = as.character(g.H1),
g.H2 = as.character(g.H2),
g.A1 = as.character(g.A1),
g.A2 = as.character(g.A2))
game.score <- game.all.times %>%
left_join(game.shot.times) %>%
mutate(home.goalie = na.locf(home.goalie, na.rm = FALSE, fromLast = TRUE),
home.goalie = na.locf(home.goalie),
away.goalie = na.locf(away.goalie, na.rm = FALSE, fromLast = TRUE),
away.goalie = na.locf(away.goalie),
g.H1 = na.locf(g.H1, na.rm = FALSE, fromLast = TRUE),
g.H1 = na.locf(g.H1),
g.H2 = na.locf(g.H2, na.rm = FALSE, fromLast = TRUE),
g.H2 = na.locf(g.H2),
g.A1 = na.locf(g.A1, na.rm = FALSE, fromLast = TRUE),
g.A1 = na.locf(g.A1),
g.A2 = na.locf(g.A2, na.rm = FALSE, fromLast = TRUE),
g.A2 = na.locf(g.A2),
home.goals = na.locf(home.goals, na.rm = FALSE),
away.goals = na.locf(away.goals, na.rm = FALSE),
home.shots = na.locf(home.shots, na.rm = FALSE),
away.shots = na.locf(away.shots, na.rm = FALSE),
home.goals = replace(home.goals, is.na(home.goals), 0),
away.goals = replace(away.goals, is.na(away.goals), 0),
home.shots = replace(home.shots, is.na(home.shots), 0),
away.shots = replace(away.shots, is.na(away.shots), 0),
H1.goals = na.locf(H1.goals, na.rm = FALSE),
H2.goals = na.locf(H2.goals, na.rm = FALSE),
H1.shots = na.locf(H1.shots, na.rm = FALSE),
H2.shots = na.locf(H2.shots, na.rm = FALSE),
H1.goals = replace(H1.goals, is.na(H1.goals), 0),
H2.goals = replace(H2.goals, is.na(H2.goals), 0),
H1.shots = replace(H1.shots, is.na(H1.shots), 0),
H2.shots = replace(H2.shots, is.na(H2.shots), 0),
A1.goals = na.locf(A1.goals, na.rm = FALSE),
A2.goals = na.locf(A2.goals, na.rm = FALSE),
A1.shots = na.locf(A1.shots, na.rm = FALSE),
A2.shots = na.locf(A2.shots, na.rm = FALSE),
A1.goals = replace(A1.goals, is.na(A1.goals), 0),
A2.goals = replace(A2.goals, is.na(A2.goals), 0),
A1.shots = replace(A1.shots, is.na(A1.shots), 0),
A2.shots = replace(A2.shots, is.na(A2.shots), 0)) %>%
mutate(period = ifelse(time <= 1200, 1, ifelse(time <= 2400, 2, 3))) %>%
relocate(period, .before = time) %>%
ungroup() %>%
group_by(season, game_id, home.team, away.team, period) %>%
mutate(d.score = home.goals - away.goals) %>%
ungroup() %>%
mutate(game.date = g.date) %>%
relocate(game.date, .after = game_id) %>%
mutate(period = as.factor(paste("Period", period))) %>%
group_by(time) %>%
slice(n()) %>%
ungroup()
# get win probabilities
h.team <- unique(game.score["home.team"])
a.team <- unique(game.score["away.team"])
g.H1 <- unique(game.score["g.H1"])
g.H2 <- unique(game.score["g.H2"])
g.A1 <- unique(game.score["g.A1"])
g.A2 <- unique(game.score["g.A2"])
home <- c("Home", "Away")
team <- unname(unlist(c(h.team, a.team)))
r <- nb.fit$theta
p <- predict(nb.fit, data.frame(team = team, home = home), type = "response")
p <- r / (r + p)
r <- r/60
H1.prior <- get.goalie.prior(as.character(g.H1), as.character(h.team), prior.shots)
H2.prior <- get.goalie.prior(as.character(g.H2), as.character(h.team), prior.shots)
A1.prior <- get.goalie.prior(as.character(g.A1), as.character(a.team), prior.shots)
A2.prior <- get.goalie.prior(as.character(g.A2), as.character(a.team), prior.shots)
H1.A1 <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(H1.prior[1], H1.prior[2], p[1], as.numeric(x[23]),
as.numeric(x[19]) - as.numeric(x[23]),
A1.prior[1], A1.prior[2], p[2], as.numeric(x[25]),
as.numeric(x[21]) - as.numeric(x[25]),
(3600 - as.numeric(x[7]))/60,
r, as.numeric(x[27])))
H1.A2 <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(H1.prior[1], H1.prior[2], p[1], as.numeric(x[23]),
as.numeric(x[19]) - as.numeric(x[23]),
A2.prior[1], A2.prior[2], p[2], as.numeric(x[26]),
as.numeric(x[22]) - as.numeric(x[26]),
(3600 - as.numeric(x[7]))/60,
r, as.numeric(x[27])))
H2.A1 <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(H2.prior[1], H2.prior[2], p[1], as.numeric(x[24]),
as.numeric(x[20]) - as.numeric(x[24]),
A1.prior[1], A1.prior[2], p[2], as.numeric(x[25]),
as.numeric(x[21]) - as.numeric(x[25]),
(3600 - as.numeric(x[7]))/60,
r, as.numeric(x[27])))
H2.A2 <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(H2.prior[1], H2.prior[2], p[1], as.numeric(x[24]),
as.numeric(x[20]) - as.numeric(x[24]),
A2.prior[1], A2.prior[2], p[2], as.numeric(x[26]),
as.numeric(x[22]) - as.numeric(x[26]),
(3600 - as.numeric(x[7]))/60,
r, as.numeric(x[27])))
# add win probabilities to data frame
game.score <- game.score %>%
tibble(H1.A1 = H1.A1,
H1.A2 = H1.A2,
H2.A1 = H2.A1,
H2.A2 = H2.A2) %>%
mutate(current.home.wp = ((home.goalie == g.H1 & away.goalie == g.A1) * H1.A1) +
((home.goalie == g.H1 & away.goalie == g.A2) * H1.A2) +
((home.goalie == g.H2 & away.goalie == g.A1) * H2.A1) +
((home.goalie == g.H2 & away.goalie == g.A2) * H2.A2),
current.away.wp = 1 - current.home.wp,
d.wp.home = ((home.goalie == g.H1 & away.goalie == g.A1) * (H2.A1 - H1.A1)) +
((home.goalie == g.H1 & away.goalie == g.A2) * (H2.A2 - H1.A2)) +
((home.goalie == g.H2 & away.goalie == g.A1) * (H1.A1 - H2.A1)) +
((home.goalie == g.H2 & away.goalie == g.A2) * (H1.A2 - H2.A2)),
d.wp.away = ((home.goalie == g.H1 & away.goalie == g.A1) * ((1 - H1.A2) - (1 - H1.A1))) +
((home.goalie == g.H1 & away.goalie == g.A2) * ((1 - H1.A1) - (1 - H1.A2))) +
((home.goalie == g.H2 & away.goalie == g.A1) * ((1 - H2.A2) - (1 - H2.A1))) +
((home.goalie == g.H2 & away.goalie == g.A2) * ((1 - H2.A1) - (1 - H2.A2))),
both.starters = current.home.wp,
home.backup = current.home.wp + d.wp.home,
away.backup = 1 - (current.away.wp + d.wp.away),
win.prob = both.starters - 0.50,
win.prob.back.1 = home.backup - 0.50,
win.prob.back.2 = away.backup - 0.50)
# generate graph
team <- factor(team, levels = levels(shot.data$team))
ggplot(game.score, aes(x = time.left, y = win.prob)) +
geom_vline(xintercept = seq(2400, 0, by = -1200), alpha = 0.3, lty = 2, size = 1.1) +
geom_hline(yintercept = 0, alpha = 1, lty = 2, size = 1.1) +
geom_area(aes(x = time.left, y =  ifelse(win.prob >= 0, win.prob, 0)),
alpha = 0.4, fill = as.character(t.color[team[1]])) +
geom_area(aes(x = time.left, y =  ifelse(win.prob < 0, win.prob, 0)),
alpha = 0.4, fill = as.character(t.color[team[2]])) +
geom_line(data = gather(game.score, key = wp.type, value = wp,
c("win.prob", "win.prob.back.1", "win.prob.back.2")),
aes(x = time.left, y = wp, color = wp.type),
size = 1.1) +
scale_color_manual(values = c("black", "red", "blue"),
labels = c("Current", "Home Backup", "Away Backup")) +
annotate(geom = "label", x = 3200, y = 0.40, label = team.colors.2$abbr[team[1]],
color = team.colors.2$p.color[team[1]],
fill = team.colors.2$s.color[team[1]],
size = 10,
label.padding = unit(0.42, "lines"),
label.size = NA) +
annotate(geom = "label", x = 3200, y = -0.40, label = team.colors.2$abbr[team[2]],
color = team.colors.2$p.color[team[2]],
fill = team.colors.2$s.color[team[2]],
size = 10,
label.padding = unit(0.42, "lines"),
label.size = NA) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Remaining",
y = "Home Team Win Probability",
title = "NHL Win Probability",
subtitle = paste(last(game.score$game.date), "--",
team.colors$abbr[team[1]], last(game.score$home.goals), "vs.",
team.colors$abbr[team[2]], last(game.score$away.goals)),
color = "Goalies",
caption = "Data via MoneyPuck.com") +
scale_x_reverse(breaks = seq(3600, 0, by = -600)) +
scale_y_continuous(labels = function(y) y + 0.5, limits = c(-0.5, 0.5))
# --------------------------------------------
# Win Probability Graph Creator
# --------------------------------------------
# INPUT SEASON, GAME ID, AND GAME DATE HERE
season.year <- 2022
game.id <- (2e4) + 445
g.date <- "2022-12-11"
game.link <- paste("https://statsapi.web.nhl.com/api/v1/game/",
((1e6) * season.year) + game.id,
"/feed/live?site=en_nhl", sep = "")
g.json <- fromJSON(game.link)
# SET PRIOR SHOTS HERE
if (game.id %/% (1e4) == 2) {
prior.shots <- shot.data %>%
filter(date >= date(g.date) - years(1)) %>%
filter(date < date(g.date))
} else {
prior.shots <- shot.data %>%
filter(season == season.year)
}
nb.fit <- glm.nb(shots ~ team + home, data = prior.shots)
# SET ACTIVE GOALIES HERE
team.home <- "ARI"
team.away <- "PHI"
goalie.home.1 <- "Connor Ingram"
goalie.home.2 <- "Karel Vejmelka"
goalie.away.1 <- "Carter Hart"
goalie.away.2 <- "Felix Sandstrom"
act.goalies <- data.frame(team = c(team.home, team.home, team.away, team.away),
goalie = c(goalie.home.1, goalie.home.2,
goalie.away.1, goalie.away.2),
g.label = c("H1", "H2", "A1", "A2"))
# get data frame of goalie information at all times
h.team <- team.replace(g.json[["gameData"]][["teams"]][["home"]][["triCode"]])
a.team <- team.replace(g.json[["gameData"]][["teams"]][["away"]][["triCode"]])
event.players <- g.json[["liveData"]][["plays"]][["allPlays"]][["players"]]
event.goalie <- lapply(event.players,
function(x) ifelse(length(x[["player"]][["fullName"]][x[["playerType"]] == "Goalie"]),
x[["player"]][["fullName"]][x[["playerType"]] == "Goalie"],
NA)) %>%
unlist() %>%
unname()
event.team <- team.replace(g.json[["liveData"]][["plays"]][["allPlays"]][["team"]][["triCode"]])
h.goalie <- ifelse(event.team == a.team, event.goalie, NA) %>%
na.locf(na.rm = FALSE, fromLast = TRUE) %>%
na.locf(na.rm = FALSE)
a.goalie <- ifelse(event.team == h.team, event.goalie, NA)%>%
na.locf(na.rm = FALSE, fromLast = TRUE) %>%
na.locf(na.rm = FALSE)
e.times <- data.frame(season = season.year,
game_id = game.id,
home.team = h.team,
away.team = a.team,
home.goalie = h.goalie,
away.goalie = a.goalie,
g.H1 = as.character(act.goalies[["goalie"]][1]),
g.H2 = as.character(act.goalies[["goalie"]][2]),
g.A1 = as.character(act.goalies[["goalie"]][3]),
g.A2 = as.character(act.goalies[["goalie"]][4]),
team = event.team,
goalie = event.goalie,
event = g.json[["liveData"]][["plays"]][["allPlays"]][["result"]][["event"]],
goals = g.json[["liveData"]][["plays"]][["allPlays"]][["about"]][["goals"]],
period = g.json[["liveData"]][["plays"]][["allPlays"]][["about"]][["period"]],
time = g.json[["liveData"]][["plays"]][["allPlays"]][["about"]][["periodTimeRemaining"]]) %>%
mutate(time = (60 * 20 * period) - as.numeric(seconds(ms(time))))
game.all.times <- e.times %>%
filter(event %in% c("Shot", "Goal")) %>%
filter(period <= 3) %>%
group_by(season, game_id, home.team, away.team) %>%
expand(time = 0:3600) %>%
mutate(time.left = 3600 - time)
game.shot.times <- e.times %>%
filter(event %in% c("Shot", "Goal")) %>%
filter(period <= 3) %>%
mutate(goalie = ifelse(is.na(goalie),
ifelse(as.character(team) == as.character(home.team),
as.character(away.goalie),
as.character(home.goalie)),
as.character(goalie)),
home.shot = as.numeric(as.character(team) == as.character(home.team)),
away.shot = as.numeric(as.character(team) == as.character(away.team)),
H1.shot = as.numeric(away.shot &
as.character(goalie) == as.character(g.H1)),
H2.shot = as.numeric(away.shot &
as.character(goalie) == as.character(g.H2)),
A1.shot = as.numeric(home.shot &
as.character(goalie) == as.character(g.A1)),
A2.shot = as.numeric(home.shot &
as.character(goalie) == as.character(g.A2)),
H1.goal = as.numeric(H1.shot & event == "Goal"),
H2.goal = as.numeric(H2.shot & event == "Goal"),
A1.goal = as.numeric(A1.shot & event == "Goal"),
A2.goal = as.numeric(A2.shot & event == "Goal")) %>%
group_by(season, game_id, home.team, away.team) %>%
summarise(home.goalie = home.goalie,
away.goalie = away.goalie,
g.H1 = g.H1,
g.H2 = g.H2,
g.A1 = g.A1,
g.A2 = g.A2,
time = time,
event = event,
home.goals = goals.home,
away.goals = goals.away,
home.shots = cumsum(home.shot),
away.shots = cumsum(away.shot),
H1.shots = cumsum(H1.shot),
H2.shots = cumsum(H2.shot),
A1.shots = cumsum(A1.shot),
A2.shots = cumsum(A2.shot),
H1.goals = cumsum(H1.goal),
H2.goals = cumsum(H2.goal),
A1.goals = cumsum(A1.goal),
A2.goals = cumsum(A2.goal),
.groups = "drop") %>%
select(-event) %>%
mutate(d.score = home.goals - away.goals,
home.team = team.replace(as.character(home.team)),
away.team = team.replace(as.character(away.team)),
home.goalie = as.character(home.goalie),
away.goalie = as.character(away.goalie),
g.H1 = as.character(g.H1),
g.H2 = as.character(g.H2),
g.A1 = as.character(g.A1),
g.A2 = as.character(g.A2))
game.score <- game.all.times %>%
left_join(game.shot.times) %>%
mutate(home.goalie = na.locf(home.goalie, na.rm = FALSE, fromLast = TRUE),
home.goalie = na.locf(home.goalie),
away.goalie = na.locf(away.goalie, na.rm = FALSE, fromLast = TRUE),
away.goalie = na.locf(away.goalie),
g.H1 = na.locf(g.H1, na.rm = FALSE, fromLast = TRUE),
g.H1 = na.locf(g.H1),
g.H2 = na.locf(g.H2, na.rm = FALSE, fromLast = TRUE),
g.H2 = na.locf(g.H2),
g.A1 = na.locf(g.A1, na.rm = FALSE, fromLast = TRUE),
g.A1 = na.locf(g.A1),
g.A2 = na.locf(g.A2, na.rm = FALSE, fromLast = TRUE),
g.A2 = na.locf(g.A2),
home.goals = na.locf(home.goals, na.rm = FALSE),
away.goals = na.locf(away.goals, na.rm = FALSE),
home.shots = na.locf(home.shots, na.rm = FALSE),
away.shots = na.locf(away.shots, na.rm = FALSE),
home.goals = replace(home.goals, is.na(home.goals), 0),
away.goals = replace(away.goals, is.na(away.goals), 0),
home.shots = replace(home.shots, is.na(home.shots), 0),
away.shots = replace(away.shots, is.na(away.shots), 0),
H1.goals = na.locf(H1.goals, na.rm = FALSE),
H2.goals = na.locf(H2.goals, na.rm = FALSE),
H1.shots = na.locf(H1.shots, na.rm = FALSE),
H2.shots = na.locf(H2.shots, na.rm = FALSE),
H1.goals = replace(H1.goals, is.na(H1.goals), 0),
H2.goals = replace(H2.goals, is.na(H2.goals), 0),
H1.shots = replace(H1.shots, is.na(H1.shots), 0),
H2.shots = replace(H2.shots, is.na(H2.shots), 0),
A1.goals = na.locf(A1.goals, na.rm = FALSE),
A2.goals = na.locf(A2.goals, na.rm = FALSE),
A1.shots = na.locf(A1.shots, na.rm = FALSE),
A2.shots = na.locf(A2.shots, na.rm = FALSE),
A1.goals = replace(A1.goals, is.na(A1.goals), 0),
A2.goals = replace(A2.goals, is.na(A2.goals), 0),
A1.shots = replace(A1.shots, is.na(A1.shots), 0),
A2.shots = replace(A2.shots, is.na(A2.shots), 0)) %>%
mutate(period = ifelse(time <= 1200, 1, ifelse(time <= 2400, 2, 3))) %>%
relocate(period, .before = time) %>%
ungroup() %>%
group_by(season, game_id, home.team, away.team, period) %>%
mutate(d.score = home.goals - away.goals) %>%
ungroup() %>%
mutate(game.date = g.date) %>%
relocate(game.date, .after = game_id) %>%
mutate(period = as.factor(paste("Period", period))) %>%
group_by(time) %>%
slice(n()) %>%
ungroup()
# get win probabilities
h.team <- unique(game.score["home.team"])
a.team <- unique(game.score["away.team"])
g.H1 <- unique(game.score["g.H1"])
g.H2 <- unique(game.score["g.H2"])
g.A1 <- unique(game.score["g.A1"])
g.A2 <- unique(game.score["g.A2"])
home <- c("Home", "Away")
team <- unname(unlist(c(h.team, a.team)))
r <- nb.fit$theta
p <- predict(nb.fit, data.frame(team = team, home = home), type = "response")
p <- r / (r + p)
r <- r/60
H1.prior <- get.goalie.prior(as.character(g.H1), as.character(h.team), prior.shots)
H2.prior <- get.goalie.prior(as.character(g.H2), as.character(h.team), prior.shots)
A1.prior <- get.goalie.prior(as.character(g.A1), as.character(a.team), prior.shots)
A2.prior <- get.goalie.prior(as.character(g.A2), as.character(a.team), prior.shots)
H1.A1 <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(H1.prior[1], H1.prior[2], p[1], as.numeric(x[23]),
as.numeric(x[19]) - as.numeric(x[23]),
A1.prior[1], A1.prior[2], p[2], as.numeric(x[25]),
as.numeric(x[21]) - as.numeric(x[25]),
(3600 - as.numeric(x[7]))/60,
r, as.numeric(x[27])))
H1.A2 <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(H1.prior[1], H1.prior[2], p[1], as.numeric(x[23]),
as.numeric(x[19]) - as.numeric(x[23]),
A2.prior[1], A2.prior[2], p[2], as.numeric(x[26]),
as.numeric(x[22]) - as.numeric(x[26]),
(3600 - as.numeric(x[7]))/60,
r, as.numeric(x[27])))
H2.A1 <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(H2.prior[1], H2.prior[2], p[1], as.numeric(x[24]),
as.numeric(x[20]) - as.numeric(x[24]),
A1.prior[1], A1.prior[2], p[2], as.numeric(x[25]),
as.numeric(x[21]) - as.numeric(x[25]),
(3600 - as.numeric(x[7]))/60,
r, as.numeric(x[27])))
H2.A2 <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(H2.prior[1], H2.prior[2], p[1], as.numeric(x[24]),
as.numeric(x[20]) - as.numeric(x[24]),
A2.prior[1], A2.prior[2], p[2], as.numeric(x[26]),
as.numeric(x[22]) - as.numeric(x[26]),
(3600 - as.numeric(x[7]))/60,
r, as.numeric(x[27])))
# add win probabilities to data frame
game.score <- game.score %>%
tibble(H1.A1 = H1.A1,
H1.A2 = H1.A2,
H2.A1 = H2.A1,
H2.A2 = H2.A2) %>%
mutate(current.home.wp = ((home.goalie == g.H1 & away.goalie == g.A1) * H1.A1) +
((home.goalie == g.H1 & away.goalie == g.A2) * H1.A2) +
((home.goalie == g.H2 & away.goalie == g.A1) * H2.A1) +
((home.goalie == g.H2 & away.goalie == g.A2) * H2.A2),
current.away.wp = 1 - current.home.wp,
d.wp.home = ((home.goalie == g.H1 & away.goalie == g.A1) * (H2.A1 - H1.A1)) +
((home.goalie == g.H1 & away.goalie == g.A2) * (H2.A2 - H1.A2)) +
((home.goalie == g.H2 & away.goalie == g.A1) * (H1.A1 - H2.A1)) +
((home.goalie == g.H2 & away.goalie == g.A2) * (H1.A2 - H2.A2)),
d.wp.away = ((home.goalie == g.H1 & away.goalie == g.A1) * ((1 - H1.A2) - (1 - H1.A1))) +
((home.goalie == g.H1 & away.goalie == g.A2) * ((1 - H1.A1) - (1 - H1.A2))) +
((home.goalie == g.H2 & away.goalie == g.A1) * ((1 - H2.A2) - (1 - H2.A1))) +
((home.goalie == g.H2 & away.goalie == g.A2) * ((1 - H2.A1) - (1 - H2.A2))),
both.starters = current.home.wp,
home.backup = current.home.wp + d.wp.home,
away.backup = 1 - (current.away.wp + d.wp.away),
win.prob = both.starters - 0.50,
win.prob.back.1 = home.backup - 0.50,
win.prob.back.2 = away.backup - 0.50)
# generate graph
team <- factor(team, levels = levels(shot.data$team))
ggplot(game.score, aes(x = time.left, y = win.prob)) +
geom_vline(xintercept = seq(2400, 0, by = -1200), alpha = 0.3, lty = 2, size = 1.1) +
geom_hline(yintercept = 0, alpha = 1, lty = 2, size = 1.1) +
geom_area(aes(x = time.left, y =  ifelse(win.prob >= 0, win.prob, 0)),
alpha = 0.4, fill = as.character(t.color[team[1]])) +
geom_area(aes(x = time.left, y =  ifelse(win.prob < 0, win.prob, 0)),
alpha = 0.4, fill = as.character(t.color[team[2]])) +
geom_line(data = gather(game.score, key = wp.type, value = wp,
c("win.prob", "win.prob.back.1", "win.prob.back.2")),
aes(x = time.left, y = wp, color = wp.type),
size = 1.1) +
scale_color_manual(values = c("black", "red", "blue"),
labels = c("Current", "Home Backup", "Away Backup")) +
annotate(geom = "label", x = 3200, y = 0.40, label = team.colors.2$abbr[team[1]],
color = team.colors.2$p.color[team[1]],
fill = team.colors.2$s.color[team[1]],
size = 10,
label.padding = unit(0.42, "lines"),
label.size = NA) +
annotate(geom = "label", x = 3200, y = -0.40, label = team.colors.2$abbr[team[2]],
color = team.colors.2$p.color[team[2]],
fill = team.colors.2$s.color[team[2]],
size = 10,
label.padding = unit(0.42, "lines"),
label.size = NA) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Remaining",
y = "Home Team Win Probability",
title = "NHL Win Probability",
subtitle = paste(last(game.score$game.date), "--",
team.colors$abbr[team[1]], last(game.score$home.goals), "vs.",
team.colors$abbr[team[2]], last(game.score$away.goals)),
color = "Goalies",
caption = "Data via MoneyPuck.com") +
scale_x_reverse(breaks = seq(3600, 0, by = -600)) +
scale_y_continuous(labels = function(y) y + 0.5, limits = c(-0.5, 0.5))
