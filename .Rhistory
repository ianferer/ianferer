ungroup() %>%
group_by(season, game_id, home.team, away.team, period) %>%
mutate(d.score = home.goals - away.goals) %>%
ungroup() %>%
group_by(season, game_id) %>%
left_join(game.date %>%
ungroup() %>%
group_by(season, game_id) %>%
summarise(game.date = first(date))) %>%
relocate(game.date, .after = game_id) %>%
relocate(home.win, .after = away.team) %>%
mutate(period = as.factor(paste("Period", period))) %>%
group_by(season, game_id, game.date, period, time)
prior.shots <- filter(shot.data, season == 2017)
nb.fit <- glm.nb(shots ~ team + home, data = prior.shots)
poisson.fit <- glm(goals ~ team + home, data = prior.shots, family = "poisson")
home <- as.factor(c("Home", "Away"))
team <- factor(c(unique(game.score$home.team), unique(game.score$away.team)), levels = levels(shot.data$team))
r <- nb.fit$theta
p <- predict(nb.fit, data.frame(team = team, home = home), type = "response")
p <- r / (r + p)
r <- r/60
# r <- shot.r/60
# p <- rep(shot.p, 2)
svp <- prior.shots$st.svp.adj
beta.params <- beta.mom(mean(svp), var(svp))
beta.mle <- fitdistr(svp, "beta", start = list(shape1 = beta.params[1], shape2 = beta.params[2]),
lower = c(0, 0))
svp.A <- beta.mle$estimate[2]
svp.B <- beta.mle$estimate[1]
A1 <- svp.A
A2 <- svp.A
B1 <- svp.B
B2 <- svp.B
L <- predict(poisson.fit, data.frame(team = team, home = home), type = "response")/60
# L <- rep(goal.mean, 2)/60
s.win.prob <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(A1, B1, p[1], as.numeric(x[11]),
as.numeric(x[13]) - as.numeric(x[11]),
A2, B2, p[2], as.numeric(x[10]),
as.numeric(x[12]) - as.numeric(x[10]),
as.numeric(x[9])/60, r, as.numeric(x[14])))
g.win.prob <- apply(game.score, MARGIN = 1,
function(x) g.win.prob.t(L[1], L[2],
as.numeric(x[9])/60, as.numeric(x[14])))
s.win.prob.h.back <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(A1, B1, p[1], 0, 0,
A2, B2, p[2], as.numeric(x[10]),
as.numeric(x[12]) - as.numeric(x[10]),
as.numeric(x[9])/60, r, as.numeric(x[14])))
# s.win.prob.a.back <- apply(game.score, MARGIN = 1,
#                            function(x) s.win.prob.t(A1, B1, p[1], as.numeric(x[11]),
#                                                     as.numeric(x[13]) - as.numeric(x[11]),
#                                                     A2, B2, p[2], 0, 0,
#                                                     as.numeric(x[9])/60, r, as.numeric(x[14])))
#
# s.win.prob.b.back <- apply(game.score, MARGIN = 1,
#                            function(x) s.win.prob.t(A1, B1, p[1], 0, 0,
#                                                     A2, B2, p[2], 0, 0,
#                                                     as.numeric(x[9])/60, r, as.numeric(x[14])))
cc <- seq(0, 3600, by = 1) / 3600
win.prob <- (cc * s.win.prob) + ((1 - cc) * g.win.prob)
win.prob.h.back <- (cc * s.win.prob.h.back) + ((1 - cc) * g.win.prob)
# win.prob.a.back <- (cc * s.win.prob.a.back) + ((1 - cc) * g.win.prob)
# win.prob.b.back <- (cc * s.win.prob.b.back) + ((1 - cc) * g.win.prob)
wp.adj <- win.prob - 0.50
wp.h.back.adj <- win.prob.h.back - 0.50
# wp.a.back.adj <- win.prob.a.back - 0.50
# wp.b.back.adj <- win.prob.b.back - 0.50
game.score <- cbind(game.score,
win.prob = wp.adj,
win.prob.h.back = wp.h.back.adj)
ggplot(game.score, aes(x = time.left, y = win.prob)) +
geom_vline(xintercept = seq(2400, 0, by = -1200), alpha = 0.3, lty = 2, size = 1.1) +
geom_hline(yintercept = 0, alpha = 1, lty = 2, size = 1.1) +
geom_area(aes(x = time.left, y =  ifelse(win.prob >= 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[1]])) +
geom_area(aes(x = time.left, y =  ifelse(win.prob < 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[2]])) +
geom_line(data = gather(game.score, key = wp.type, value = wp,
c("win.prob", "win.prob.h.back")),
aes(x = time.left, y = wp, color = wp.type),
size = 1.1) +
scale_color_manual(values = c("black", "red"),
labels = c("With Starter", "With Backup")) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Remaining",
y = "Win Probability",
title = "NHL Win Probability",
subtitle = paste(last(game.score$game.date), "--", team[1], last(game.score$home.goals), "vs.",
team[2], last(game.score$away.goals)),
color = "Home Team WP") +
scale_x_reverse(breaks = seq(3600, 0, by = -600)) +
scale_y_continuous(labels = function(y) y + 0.5, limits = c(-0.5, 0.5))
game.score <- game.all.times %>%
left_join(game.shot.times) %>%
mutate(home.goals = na.locf(home.goals, na.rm = FALSE),
away.goals = na.locf(away.goals, na.rm = FALSE),
home.shots = na.locf(home.shots, na.rm = FALSE),
away.shots = na.locf(away.shots, na.rm = FALSE),
home.goals = replace(home.goals, is.na(home.goals), 0),
away.goals = replace(away.goals, is.na(away.goals), 0),
home.shots = replace(home.shots, is.na(home.shots), 0),
away.shots = replace(away.shots, is.na(away.shots), 0),
home.win = na.locf(na.locf(home.win, na.rm = FALSE), fromLast = TRUE)) %>%
mutate(period = ifelse(time <= 1200, 1, ifelse(time <= 2400, 2, 3))) %>%
relocate(period, .before = time) %>%
ungroup() %>%
group_by(season, game_id, home.team, away.team, period) %>%
mutate(d.score = home.goals - away.goals) %>%
ungroup() %>%
group_by(season, game_id) %>%
left_join(game.date %>%
ungroup() %>%
group_by(season, game_id) %>%
summarise(game.date = first(date))) %>%
relocate(game.date, .after = game_id) %>%
relocate(home.win, .after = away.team) %>%
mutate(period = as.factor(paste("Period", period))) %>%
group_by(season, game_id, game.date, period, time)
cc <- 1
win.prob <- (cc * s.win.prob) + ((1 - cc) * g.win.prob)
win.prob.h.back <- (cc * s.win.prob.h.back) + ((1 - cc) * g.win.prob)
# win.prob.a.back <- (cc * s.win.prob.a.back) + ((1 - cc) * g.win.prob)
# win.prob.b.back <- (cc * s.win.prob.b.back) + ((1 - cc) * g.win.prob)
wp.adj <- win.prob - 0.50
wp.h.back.adj <- win.prob.h.back - 0.50
# wp.a.back.adj <- win.prob.a.back - 0.50
# wp.b.back.adj <- win.prob.b.back - 0.50
game.score <- cbind(game.score,
win.prob = wp.adj,
win.prob.h.back = wp.h.back.adj)
ggplot(game.score, aes(x = time.left, y = win.prob)) +
geom_vline(xintercept = seq(2400, 0, by = -1200), alpha = 0.3, lty = 2, size = 1.1) +
geom_hline(yintercept = 0, alpha = 1, lty = 2, size = 1.1) +
geom_area(aes(x = time.left, y =  ifelse(win.prob >= 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[1]])) +
geom_area(aes(x = time.left, y =  ifelse(win.prob < 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[2]])) +
geom_line(data = gather(game.score, key = wp.type, value = wp,
c("win.prob", "win.prob.h.back")),
aes(x = time.left, y = wp, color = wp.type),
size = 1.1) +
scale_color_manual(values = c("black", "red"),
labels = c("With Starter", "With Backup")) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Remaining",
y = "Win Probability",
title = "NHL Win Probability",
subtitle = paste(last(game.score$game.date), "--", team[1], last(game.score$home.goals), "vs.",
team[2], last(game.score$away.goals)),
color = "Home Team WP") +
scale_x_reverse(breaks = seq(3600, 0, by = -600)) +
scale_y_continuous(labels = function(y) y + 0.5, limits = c(-0.5, 0.5))
34/41
,game.all.times <- all.shots %>%
filter(season == 2018) %>%
filter(isPlayoffGame == 0) %>%
filter(event %in% shot.events) %>%
filter(period <= 3) %>%
mutate(home.team = homeTeamCode,
away.team = awayTeamCode) %>%
group_by(season, game_id, home.team, away.team) %>%
expand(time = 0:3600) %>%
mutate(time.left = 3600 - time)
game.shot.times <- all.shots %>%
filter(season == 2018) %>%
filter(isPlayoffGame == 0) %>%
filter(event %in% shot.events) %>%
filter(period <= 3) %>%
mutate(home.team = homeTeamCode,
away.team = awayTeamCode,
home.goal = as.numeric(event == "GOAL" & teamCode == home.team),
away.goal = as.numeric(event == "GOAL" & teamCode == away.team),
home.shot = as.numeric(teamCode == home.team),
away.shot = as.numeric(teamCode == away.team)) %>%
group_by(season, game_id, home.team, away.team, time) %>%
summarise(home.goal = sum(home.goal),
away.goal = sum(away.goal),
home.shot = sum(home.shot),
away.shot = sum(away.shot),
home.win = mean(homeTeamWon)) %>%
summarise(time = time,
home.goals = cumsum(home.goal),
away.goals = cumsum(away.goal),
home.shots = cumsum(home.shot),
away.shots = cumsum(away.shot),
home.win = home.win)
prior.shots <- filter(shot.data, season == 2017)
nb.fit <- glm.nb(shots ~ team + home, data = prior.shots)
svp <- prior.shots$st.svp.adj
beta.params <- beta.mom(mean(svp), var(svp))
beta.mle <- fitdistr(svp, "beta", start = list(shape1 = beta.params[1], shape2 = beta.params[2]),
lower = c(0, 0))
svp.A <- beta.mle$estimate[2]
svp.B <- beta.mle$estimate[1]
A1 <- svp.A
A2 <- svp.A
B1 <- svp.B
B2 <- svp.B
game.all.times <- all.shots %>%
filter(season == 2018) %>%
filter(isPlayoffGame == 0) %>%
filter(event %in% shot.events) %>%
filter(period <= 3) %>%
mutate(home.team = homeTeamCode,
away.team = awayTeamCode) %>%
group_by(season, game_id, home.team, away.team) %>%
expand(time = 0:3600) %>%
mutate(time.left = 3600 - time)
game.shot.times <- all.shots %>%
filter(season == 2018) %>%
filter(isPlayoffGame == 0) %>%
filter(event %in% shot.events) %>%
filter(period <= 3) %>%
mutate(home.team = homeTeamCode,
away.team = awayTeamCode,
home.goal = as.numeric(event == "GOAL" & teamCode == home.team),
away.goal = as.numeric(event == "GOAL" & teamCode == away.team),
home.shot = as.numeric(teamCode == home.team),
away.shot = as.numeric(teamCode == away.team)) %>%
group_by(season, game_id, home.team, away.team, time) %>%
summarise(home.goal = sum(home.goal),
away.goal = sum(away.goal),
home.shot = sum(home.shot),
away.shot = sum(away.shot),
home.win = mean(homeTeamWon)) %>%
summarise(time = time,
home.goals = cumsum(home.goal),
away.goals = cumsum(away.goal),
home.shots = cumsum(home.shot),
away.shots = cumsum(away.shot),
home.win = home.win)
prior.shots <- filter(shot.data, season == 2017)
nb.fit <- glm.nb(shots ~ team + home, data = prior.shots)
svp <- prior.shots$st.svp.adj
beta.params <- beta.mom(mean(svp), var(svp))
beta.mle <- fitdistr(svp, "beta", start = list(shape1 = beta.params[1], shape2 = beta.params[2]),
lower = c(0, 0))
svp.A <- beta.mle$estimate[2]
svp.B <- beta.mle$estimate[1]
A1 <- svp.A
A2 <- svp.A
B1 <- svp.B
B2 <- svp.B
game.id <- (2e4) + 7
pit.wsh.all <- filter(game.all.times, game_id == game.id)
pit.wsh.shots <- filter(game.shot.times, game_id == game.id)
game.score <- pit.wsh.all %>%
left_join(pit.wsh.shots) %>%
mutate(home.goals = na.locf(home.goals, na.rm = FALSE),
away.goals = na.locf(away.goals, na.rm = FALSE),
home.shots = na.locf(home.shots, na.rm = FALSE),
away.shots = na.locf(away.shots, na.rm = FALSE),
home.goals = replace(home.goals, is.na(home.goals), 0),
away.goals = replace(away.goals, is.na(away.goals), 0),
home.shots = replace(home.shots, is.na(home.shots), 0),
away.shots = replace(away.shots, is.na(away.shots), 0),
home.win = na.locf(na.locf(home.win, na.rm = FALSE), fromLast = TRUE)) %>%
mutate(period = ifelse(time <= 1200, 1, ifelse(time <= 2400, 2, 3))) %>%
relocate(period, .before = time) %>%
ungroup() %>%
group_by(season, game_id, home.team, away.team, period) %>%
mutate(d.score = home.goals - away.goals) %>%
ungroup() %>%
group_by(season, game_id) %>%
left_join(game.date %>%
ungroup() %>%
group_by(season, game_id) %>%
summarise(game.date = first(date))) %>%
relocate(game.date, .after = game_id) %>%
relocate(home.win, .after = away.team) %>%
mutate(period = as.factor(paste("Period", period))) %>%
group_by(season, game_id, game.date, period, time)
home <- as.factor(c("Home", "Away"))
team <- factor(c(unique(game.score$home.team), unique(game.score$away.team)), levels = levels(shot.data$team))
r <- nb.fit$theta
p <- predict(nb.fit, data.frame(team = team, home = home), type = "response")
p <- r / (r + p)
r <- r/60
s.win.prob <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(A1, B1, p[1], as.numeric(x[11]),
as.numeric(x[13]) - as.numeric(x[11]),
A2, B2, p[2], as.numeric(x[10]),
as.numeric(x[12]) - as.numeric(x[10]),
as.numeric(x[9])/60, r, as.numeric(x[14])))
wp.adj <- s.win.prob - 0.50
game.score <- cbind(game.score,
win.prob = wp.adj)
ggplot(game.score, aes(x = time.left, y = win.prob)) +
geom_vline(xintercept = seq(2400, 0, by = -1200), alpha = 0.3, lty = 2, size = 1.1) +
geom_hline(yintercept = 0, alpha = 1, lty = 2, size = 1.1) +
geom_area(aes(x = time.left, y =  ifelse(win.prob >= 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[1]])) +
geom_area(aes(x = time.left, y =  ifelse(win.prob < 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[2]])) +
geom_line(color = "black", size = 1.1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Remaining",
y = "Win Probability",
title = "NHL Win Probability",
subtitle = paste(last(game.score$game.date), "--", team[1], last(game.score$home.goals), "vs.",
team[2], last(game.score$away.goals))) +
scale_x_reverse(breaks = seq(3600, 0, by = -600)) +
scale_y_continuous(labels = function(y) y + 0.5, limits = c(-0.5, 0.5))
game.id <- (2e4) + 688
nyi.nyr.all <- filter(game.all.times, game_id == game.id)
nyi.nyr.shots <- filter(game.shot.times, game_id == game.id)
game.score <- pit.wsh.all %>%
left_join(pit.wsh.shots) %>%
mutate(home.goals = na.locf(home.goals, na.rm = FALSE),
away.goals = na.locf(away.goals, na.rm = FALSE),
home.shots = na.locf(home.shots, na.rm = FALSE),
away.shots = na.locf(away.shots, na.rm = FALSE),
home.goals = replace(home.goals, is.na(home.goals), 0),
away.goals = replace(away.goals, is.na(away.goals), 0),
home.shots = replace(home.shots, is.na(home.shots), 0),
away.shots = replace(away.shots, is.na(away.shots), 0),
home.win = na.locf(na.locf(home.win, na.rm = FALSE), fromLast = TRUE)) %>%
mutate(period = ifelse(time <= 1200, 1, ifelse(time <= 2400, 2, 3))) %>%
relocate(period, .before = time) %>%
ungroup() %>%
group_by(season, game_id, home.team, away.team, period) %>%
mutate(d.score = home.goals - away.goals) %>%
ungroup() %>%
group_by(season, game_id) %>%
left_join(game.date %>%
ungroup() %>%
group_by(season, game_id) %>%
summarise(game.date = first(date))) %>%
relocate(game.date, .after = game_id) %>%
relocate(home.win, .after = away.team) %>%
mutate(period = as.factor(paste("Period", period))) %>%
group_by(season, game_id, game.date, period, time)
home <- as.factor(c("Home", "Away"))
team <- factor(c(unique(game.score$home.team), unique(game.score$away.team)), levels = levels(shot.data$team))
r <- nb.fit$theta
p <- predict(nb.fit, data.frame(team = team, home = home), type = "response")
p <- r / (r + p)
r <- r/60
s.win.prob <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(A1, B1, p[1], as.numeric(x[11]),
as.numeric(x[13]) - as.numeric(x[11]),
A2, B2, p[2], as.numeric(x[10]),
as.numeric(x[12]) - as.numeric(x[10]),
as.numeric(x[9])/60, r, as.numeric(x[14])))
wp.adj <- s.win.prob - 0.50
game.score <- cbind(game.score,
win.prob = wp.adj)
ggplot(game.score, aes(x = time.left, y = win.prob)) +
geom_vline(xintercept = seq(2400, 0, by = -1200), alpha = 0.3, lty = 2, size = 1.1) +
geom_hline(yintercept = 0, alpha = 1, lty = 2, size = 1.1) +
geom_area(aes(x = time.left, y =  ifelse(win.prob >= 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[1]])) +
geom_area(aes(x = time.left, y =  ifelse(win.prob < 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[2]])) +
geom_line(color = "black", size = 1.1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Remaining",
y = "Win Probability",
title = "NHL Win Probability",
subtitle = paste(last(game.score$game.date), "--", team[1], last(game.score$home.goals), "vs.",
team[2], last(game.score$away.goals))) +
scale_x_reverse(breaks = seq(3600, 0, by = -600)) +
scale_y_continuous(labels = function(y) y + 0.5, limits = c(-0.5, 0.5))
game.id <- (2e4) + 688
nyi.nyr.all <- filter(game.all.times, game_id == game.id)
nyi.nyr.shots <- filter(game.shot.times, game_id == game.id)
game.score <- nyi.nyr.all %>%
left_join(nyi.nyr.shots) %>%
mutate(home.goals = na.locf(home.goals, na.rm = FALSE),
away.goals = na.locf(away.goals, na.rm = FALSE),
home.shots = na.locf(home.shots, na.rm = FALSE),
away.shots = na.locf(away.shots, na.rm = FALSE),
home.goals = replace(home.goals, is.na(home.goals), 0),
away.goals = replace(away.goals, is.na(away.goals), 0),
home.shots = replace(home.shots, is.na(home.shots), 0),
away.shots = replace(away.shots, is.na(away.shots), 0),
home.win = na.locf(na.locf(home.win, na.rm = FALSE), fromLast = TRUE)) %>%
mutate(period = ifelse(time <= 1200, 1, ifelse(time <= 2400, 2, 3))) %>%
relocate(period, .before = time) %>%
ungroup() %>%
group_by(season, game_id, home.team, away.team, period) %>%
mutate(d.score = home.goals - away.goals) %>%
ungroup() %>%
group_by(season, game_id) %>%
left_join(game.date %>%
ungroup() %>%
group_by(season, game_id) %>%
summarise(game.date = first(date))) %>%
relocate(game.date, .after = game_id) %>%
relocate(home.win, .after = away.team) %>%
mutate(period = as.factor(paste("Period", period))) %>%
group_by(season, game_id, game.date, period, time)
home <- as.factor(c("Home", "Away"))
team <- factor(c(unique(game.score$home.team), unique(game.score$away.team)), levels = levels(shot.data$team))
r <- nb.fit$theta
p <- predict(nb.fit, data.frame(team = team, home = home), type = "response")
p <- r / (r + p)
r <- r/60
s.win.prob <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(A1, B1, p[1], as.numeric(x[11]),
as.numeric(x[13]) - as.numeric(x[11]),
A2, B2, p[2], as.numeric(x[10]),
as.numeric(x[12]) - as.numeric(x[10]),
as.numeric(x[9])/60, r, as.numeric(x[14])))
wp.adj <- s.win.prob - 0.50
game.score <- cbind(game.score,
win.prob = wp.adj)
ggplot(game.score, aes(x = time.left, y = win.prob)) +
geom_vline(xintercept = seq(2400, 0, by = -1200), alpha = 0.3, lty = 2, size = 1.1) +
geom_hline(yintercept = 0, alpha = 1, lty = 2, size = 1.1) +
geom_area(aes(x = time.left, y =  ifelse(win.prob >= 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[1]])) +
geom_area(aes(x = time.left, y =  ifelse(win.prob < 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[2]])) +
geom_line(color = "black", size = 1.1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Remaining",
y = "Win Probability",
title = "NHL Win Probability",
subtitle = paste(last(game.score$game.date), "--", team[1], last(game.score$home.goals), "vs.",
team[2], last(game.score$away.goals))) +
scale_x_reverse(breaks = seq(3600, 0, by = -600)) +
scale_y_continuous(labels = function(y) y + 0.5, limits = c(-0.5, 0.5))
game.id <- (2e4) + 1270
lak.vgk.all <- filter(game.all.times, game_id == game.id)
lak.vgk.shots <- filter(game.shot.times, game_id == game.id)
game.score <- lak.vgk.all %>%
left_join(lak.vgk.shots) %>%
mutate(home.goals = na.locf(home.goals, na.rm = FALSE),
away.goals = na.locf(away.goals, na.rm = FALSE),
home.shots = na.locf(home.shots, na.rm = FALSE),
away.shots = na.locf(away.shots, na.rm = FALSE),
home.goals = replace(home.goals, is.na(home.goals), 0),
away.goals = replace(away.goals, is.na(away.goals), 0),
home.shots = replace(home.shots, is.na(home.shots), 0),
away.shots = replace(away.shots, is.na(away.shots), 0),
home.win = na.locf(na.locf(home.win, na.rm = FALSE), fromLast = TRUE)) %>%
mutate(period = ifelse(time <= 1200, 1, ifelse(time <= 2400, 2, 3))) %>%
relocate(period, .before = time) %>%
ungroup() %>%
group_by(season, game_id, home.team, away.team, period) %>%
mutate(d.score = home.goals - away.goals) %>%
ungroup() %>%
group_by(season, game_id) %>%
left_join(game.date %>%
ungroup() %>%
group_by(season, game_id) %>%
summarise(game.date = first(date))) %>%
relocate(game.date, .after = game_id) %>%
relocate(home.win, .after = away.team) %>%
mutate(period = as.factor(paste("Period", period))) %>%
group_by(season, game_id, game.date, period, time)
home <- as.factor(c("Home", "Away"))
team <- factor(c(unique(game.score$home.team), unique(game.score$away.team)), levels = levels(shot.data$team))
r <- nb.fit$theta
p <- predict(nb.fit, data.frame(team = team, home = home), type = "response")
p <- r / (r + p)
r <- r/60
s.win.prob <- apply(game.score, MARGIN = 1,
function(x) s.win.prob.t(A1, B1, p[1], as.numeric(x[11]),
as.numeric(x[13]) - as.numeric(x[11]),
A2, B2, p[2], as.numeric(x[10]),
as.numeric(x[12]) - as.numeric(x[10]),
as.numeric(x[9])/60, r, as.numeric(x[14])))
wp.adj <- s.win.prob - 0.50
game.score <- cbind(game.score,
win.prob = wp.adj)
ggplot(game.score, aes(x = time.left, y = win.prob)) +
geom_vline(xintercept = seq(2400, 0, by = -1200), alpha = 0.3, lty = 2, size = 1.1) +
geom_hline(yintercept = 0, alpha = 1, lty = 2, size = 1.1) +
geom_area(aes(x = time.left, y =  ifelse(win.prob >= 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[1]])) +
geom_area(aes(x = time.left, y =  ifelse(win.prob < 0, win.prob, 0)),
alpha = 0.7, fill = as.character(t.color[team[2]])) +
geom_line(color = "black", size = 1.1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Remaining",
y = "Win Probability",
title = "NHL Win Probability",
subtitle = paste(last(game.score$game.date), "--", team[1], last(game.score$home.goals), "vs.",
team[2], last(game.score$away.goals))) +
scale_x_reverse(breaks = seq(3600, 0, by = -600)) +
scale_y_continuous(labels = function(y) y + 0.5, limits = c(-0.5, 0.5))
library(tidyverse)
help(inner_join)
(1909 - 192) / 1909
((1909 - 16) - (192 - 16)) / (1909 - 16)
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post()
blogdown:::preview_site()
