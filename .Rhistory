shot.mean <- mean(shots)
shot.var <- var(shots)
p <- shot.mean / shot.var
r <- (1/60) * ((shot.mean^2) / (shot.var - shot.mean))
s1 <- 0.900
s2 <- 0.900
mins.left <- seq(60, 0, by = -1)
goals.down <- c(1:5)
m.len <- length(mins.left)
g.len <- length(goals.down)
mins.left <- rep(mins.left, rep(g.len, m.len))
goals.down <- rep(goals.down, m.len)
win.prob <- rep(0, m.len * g.len)
win.prob.RBS <- rep(0, m.len * g.len)
bin.negbin <- function(k, s, r, p) {
# k = number of goals scored
# s = save percentage
# r, p = negative binomial distribution parameters
Q <- 0
for (m in k:100) {
mp <- choose(m, k) * choose(m + r - 1, m) * ((1 - s)^k) * (s^(m - k)) * (p^r) * ((1 - p)^m)
Q <- Q + mp
}
return(Q)
}
for (i in 1:length(win.prob)) {
t <- mins.left[i]
d <- goals.down[i]
K <- 0:12
for (j1 in 1:length(K)) {
for (j2 in 1:length(K)) {
k1 <- K[j1]
k2 <- K[j2]
if (k1 - k2 > d) {
win.prob[i] <- win.prob[i] + (bin.negbin(k1, s2, t*r, p) * bin.negbin(k2, s1, t*r, p))
win.prob.RBS[i] <- win.prob.RBS[i] + (bin.negbin(k1, s2, t*r, p) * bin.negbin(k2, 0.850, t*r, p))
}
if (k1 - k2 == d) {
win.prob[i] <- win.prob[i] + ((1/2) * (bin.negbin(k1, s2, t*r, p) * bin.negbin(k2, s1, t*r, p)))
win.prob.RBS[i] <- win.prob.RBS[i] + ((1/2) * (bin.negbin(k1, s2, t*r, p) * bin.negbin(k2, 0.850, t*r, p)))
}
}
}
}
win.prob.df <- data.frame(mins.left = mins.left, goals.down = as.factor(goals.down), win.prob = win.prob)
win.prob.RBS.df <- data.frame(mins.left = mins.left, goals.down = as.factor(goals.down), win.prob = win.prob.RBS)
ggplot(win.prob.df, aes(x = mins.left, y = win.prob, group = goals.down, color = goals.down)) +
geom_line(size = 1.2) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Minutes Remaining",
y = "Win Probability",
title = "Win Probability w/ SOG as Compound Poisson Process",
subtitle = sprintf("Save Percentage = %.3f / Opponent Save Percentage = %.3f", s1, s2),
caption = "Data via @EvolvingWild play-by-play scraper",
color = "Goals Down") +
scale_x_reverse() +
ylim(0, 0.40)
ggplot(win.prob.RBS.df, aes(x = mins.left, y = win.prob, group = goals.down, color = goals.down)) +
geom_line(size = 1.2) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Minutes Remaining",
y = "Win Probability",
title = "Win Probability w/ SOG as Compound Poisson Process",
subtitle = sprintf("Save Percentage = %.3f / Opponent Save Percentage = %.3f", 0.850, s2),
caption = "Data via @EvolvingWild play-by-play scraper",
color = "Goals Down") +
scale_x_reverse() +
ylim(0, 0.40)
win.prob <- rep(0, m.len * g.len)
for (i in 1:length(win.prob)) {
t <- mins.left[i]
d <- goals.down[i]
K <- 0:20
for (j1 in 1:length(K)) {
for (j2 in 1:length(K)) {
k1 <- K[j1]
k2 <- K[j2]
if (k1 - k2 > d) {win.prob[i] <- win.prob[i] + (dpois(k1, lambda = t*0.0465) * dpois(k2, lambda = t*0.0465))}
if (k1 - k2 == d) {win.prob[i] <- win.prob[i] + ((1/2) * dpois(k1, lambda = t*0.0465) * dpois(k2, lambda = t*0.0465))}
}
}
}
win.prob.df <- data.frame(mins.left = mins.left, goals.down = as.factor(goals.down), win.prob = win.prob)
ggplot(win.prob.df, aes(x = mins.left, y = win.prob, group = goals.down, color = goals.down)) +
geom_line(size = 1.2) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Minutes Remaining",
y = "Win Probability",
title = "Win Probability w/ SOG as Compound Poisson Process",
caption = "Data via @EvolvingWild play-by-play scraper",
color = "Goals Down") +
scale_x_reverse() +
ylim(0, 0.40)
# NHL Shots as Compound Poisson Process
library(RCurl)
library(xml2)
library(rvest)
library(jsonlite)
library(foreach)
library(lubridate)
library(teamcolors)
library(survival)
library(survminer)
library(knitr)
library(gtsummary)
library(kableExtra)
library(MASS)
library(fitdistrplus)
library(pscl)
library(lmtest)
library(pROC)
library(MLmetrics)
library(tidyverse)
# --------------------------------------------
# Data
# --------------------------------------------
beta.mom <- function(m, v) {
# m = sample mean
# v = sample variance
# return (a.hat, b.hat), the method-of-moments estimators of the beta distribution
a.hat <- m * (((1 - m) / v) - 1)
b.hat <- (1 - m) * (((1 - m) / v) - 1)
return(c(a.hat, b.hat))
}
nbinom.mom <- function(m, v) {
# m = sample mean
# v = sample variance
# return (p.hat, r.hat), the method-of-moments estimators of the negative binomial distribution
p.hat <- m / v
r.hat <- (m^2) /  (v - m)
return(c(p.hat, r.hat))
}
# read in shot data
all.shots <- read.csv("C:/Users/fereri/Documents/NHL Timeout Value/Shot CPP/shots_2007_2020.csv",
stringsAsFactors = FALSE)
shot.events <- c("SHOT", "GOAL")
# read in game-level data
games <- read.csv("C:/Users/fereri/Documents/NHL Timeout Value/Shot CPP/games_2007_2021.csv",
stringsAsFactors = FALSE)
# read in team colors
team.colors <- read.csv("C:/Users/fereri/Documents/NHL Timeout Value/Shot CPP/team_colors.csv",
stringsAsFactors = FALSE)
t.color <- team.colors$color
names(t.color) <- team.colors$team
team.info <- all.shots %>%
filter(season >= 2014) %>%
filter(isPlayoffGame == 0) %>%
filter(event %in% shot.events) %>%
filter(period <= 3) %>%
mutate(team = teamCode,
opponent = ifelse(teamCode == homeTeamCode,
awayTeamCode,
homeTeamCode),
home = ifelse(teamCode == homeTeamCode,
"Home",
"Away")) %>%
group_by(season, game_id) %>%
filter(!any(goalieNameForShot == "" & event == "SHOT")) %>%
filter(!any(time == 0)) %>%
ungroup() %>%
group_by(season, game_id, team, opponent, home) %>%
summarise(shots = n(),
goals = sum(event == "GOAL"))
goalie.info <- all.shots %>%
filter(season >= 2014) %>%
filter(isPlayoffGame == 0) %>%
filter(event %in% shot.events) %>%
filter(period <= 3) %>%
mutate(team = ifelse(teamCode == homeTeamCode,
awayTeamCode,
homeTeamCode),
opponent = teamCode,
home = ifelse(teamCode == homeTeamCode,
"Away",
"Home"),
shot.goalie = goalieNameForShot) %>%
group_by(season, game_id) %>%
filter(!any(goalieNameForShot == "" & event == "SHOT")) %>%
filter(!any(time == 0)) %>%
ungroup() %>%
group_by(season, game_id, team, opponent, home) %>%
summarise(starter = first(shot.goalie[shot.goalie != ""]),
st.shots.against = sum(shot.goalie != "" &
shot.goalie == first(shot.goalie[shot.goalie != ""])),
st.goals.against = sum(shot.goalie != "" &
shot.goalie == first(shot.goalie[shot.goalie != ""]) &
event == "GOAL")) %>%
mutate(st.svp = 1 - (st.goals.against / st.shots.against),
st.svp.adj = (st.shots.against - st.goals.against + 1) / (st.shots.against + 2),
rbs = as.numeric(st.svp <= 0.85))
game.info <- all.shots %>%
filter(season >= 2014) %>%
filter(isPlayoffGame == 0) %>%
filter(event %in% shot.events) %>%
filter(period <= 3) %>%
mutate(team = teamCode,
opponent = ifelse(teamCode == homeTeamCode,
awayTeamCode,
homeTeamCode),
home = ifelse(teamCode == homeTeamCode,
"Home",
"Away"),
win = ifelse(teamCode == homeTeamCode,
homeTeamWon,
1 - homeTeamWon)) %>%
group_by(season, game_id) %>%
filter(!any(goalieNameForShot == "" & event == "SHOT")) %>%
filter(!any(time == 0)) %>%
ungroup() %>%
group_by(season, game_id, team, opponent, home) %>%
summarise(win = mean(win))
game.date <- games %>%
filter(season >= 2014 & season <= 2020) %>%
filter(playoffGame == 0) %>%
mutate(game_id = gameId %% 1e5,
opponent = opposingTeam,
home = ifelse(home_or_away == "HOME",
"Home",
"Away"),
date = ymd(gameDate)) %>%
group_by(season, game_id, team, opponent, home, date) %>%
summarise()
shot.data <- game.date %>%
inner_join(team.info) %>%
inner_join(goalie.info) %>%
inner_join(game.info) %>%
ungroup() %>%
mutate(team = as.factor(team),
opponent = as.factor(opponent),
home = as.factor(home)) %>%
filter(shots >= 10)
# --------------------------------------------
# Exploratory Data Analysis
# --------------------------------------------
goals <- shot.data$goals
shots <- shot.data$shots
svp <- shot.data$st.svp.adj
goal.mean <- mean(goals)
shot.mean <- mean(shots)
shot.var <- var(shots)
svp.mean <- mean(svp)
svp.var <- var(svp)
nb.params <- nbinom.mom(shot.mean, shot.var)
shot.p <- nb.params[1]
shot.r <- nb.params[2]
beta.params <- beta.mom(svp.mean, svp.var)
beta.mle <- fitdistr(svp, "beta", start = list(shape1 = beta.params[1], shape2 = beta.params[2]), lower = c(0, 0))
svp.A <- beta.mle$estimate[1]
svp.B <- beta.mle$estimate[2]
goal.x <- seq(min(goals), max(goals), by = 1)
goal.poisson <- dpois(goal.x, lambda = goal.mean)
goal.density <- data.frame(goal.x = goal.x, goal.poisson = goal.poisson)
shot.x <- seq(min(shots), max(shots), by = 1)
shot.poisson <- dpois(shot.x, lambda = shot.mean)
shot.nb <- dnbinom(shot.x, prob = shot.p, size = shot.r)
shot.density <- data.frame(shot.x = shot.x, shot.poisson = shot.poisson, shot.nb = shot.nb)
svp.x <- seq(0, 1, by = 0.001)
svp.beta <- dbeta(svp.x, shape1 = svp.A, shape2 = svp.B)
svp.density <- data.frame(svp.x = svp.x, svp.beta = svp.beta)
# histogram of goals with Poisson density
ggplot(shot.data, aes(x = goals, y = ..density..)) +
geom_histogram(binwidth = 1,
center = 0,
col = "white",
fill = "indianred1") +
geom_point(data = goal.density, aes(x = goal.x, y = goal.poisson),
col = "black",
size = 3) +
geom_line(data = goal.density, aes(x = goal.x, y = goal.poisson),
col = "black",
size = 1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Goals Scored",
y = "Density",
title = "Histogram of Regulation Goals Scored",
subtitle = "Poisson Distribution",
caption = "Data via MoneyPuck.com") +
scale_x_continuous(breaks = seq(min(goals), max(goals), 1))
# histogram of shots with Poisson density
ggplot(shot.data, aes(x = shots, y = ..density..)) +
geom_histogram(binwidth = 1,
center = 0,
col = "white",
fill = "skyblue") +
geom_point(data = shot.density, aes(x = shot.x, y = shot.poisson),
col = "black",
size = 3) +
geom_line(data = shot.density, aes(x = shot.x, y = shot.poisson),
col = "black",
size = 1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Shots On Goal",
y = "Density",
title = "Histogram of Regulation Shots On Goal",
subtitle = "Poisson Distribution",
caption = "Data via MoneyPuck.com")
# histogram of shots with negative binomial density
ggplot(shot.data, aes(x = shots, y = ..density..)) +
geom_histogram(binwidth = 1,
center = 0,
col = "white",
fill = "skyblue") +
geom_point(data = shot.density, aes(x = shot.x, y = shot.nb),
col = "black",
size = 3) +
geom_line(data = shot.density, aes(x = shot.x, y = shot.nb),
col = "black",
size = 1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Shots On Goal",
y = "Density",
title = "Histogram of Regulation Shots On Goal",
subtitle = "Negative Binomial Distribution",
caption = "Data via MoneyPuck.com")
m.x <- rep(shot.x, 2)
m.density <- c(shot.nb, shot.poisson)
m.name <- c(rep("Negative Binomial", length(shot.nb)), rep("Poisson", length(shot.poisson)))
shot.density.all <- data.frame(m.x = m.x, m.density = m.density, m.name = m.name)
# histogram of shots with both densities
ggplot(shot.data, aes(x = shots, y = ..density..)) +
geom_histogram(binwidth = 1,
center = 0,
col = "white",
fill = "skyblue") +
geom_point(data = shot.density.all, aes(x = m.x, y = m.density, col = m.name), size = 3) +
geom_line(data = shot.density.all, aes(x = m.x, y = m.density, col = m.name), size = 1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Shots On Goal",
y = "Density",
title = "Histogram of Regulation Shots On Goal",
subtitle = "Poisson vs. Negative Binomial",
caption = "Data via MoneyPuck.com",
color = "Distribution") +
scale_color_manual(values = c("black", "red"))
# density of starter save percentages with beta density
ggplot(shot.data, aes(x = st.svp.adj, y = ..density..)) +
stat_density(fill = "limegreen",
alpha = 0.4,
adjust = 2) +
geom_density(col = "gray70",
size = 1.1,
adjust = 2) +
geom_line(data = svp.density, aes(x = svp.x, y = svp.beta),
col = "black",
size = 1.2,
lty = 2) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Starter Save Percentage",
y = "Density",
title = "Density of Starter Save Percentages",
subtitle = "Beta Distribution",
caption = "Data via MoneyPuck.com")
shot.times <- all.shots %>% filter(season >= 2014) %>% filter(event %in% shot.events) %>% filter(period <= 3) %>% mutate(team = teamCode, opponent = ifelse(teamCode == homeTeamCode, awayTeamCode, homeTeamCode), home = ifelse(teamCode == homeTeamCode, "Home", "Away")) %>% group_by(season, game_id) %>% filter(!any(goalieNameForShot == "" & event == "SHOT")) %>% filter(!any(time == 0)) %>% ungroup()
ggplot(shot.times, aes(x = time, y = ..density..)) + geom_histogram()
ggplot(timeouts, aes(x = game_seconds, y = ..density..)) +
geom_histogram(breaks = seq(0, 3600, 60),
fill = "indianred1") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Elapsed",
y = "Density",
title = "Histogram of NHL Shots on Goal",
subtitle = "Seconds Elapsed") +
geom_vline(xintercept = c(1200, 2400, 3600), alpha = 0.5, lty = 2, size = 1.1) +
scale_x_continuous(breaks = seq(0, 3600, 600))
ggplot(shot.times, aes(x = time, y = ..density..)) +
geom_histogram(breaks = seq(0, 3600, 60),
fill = "indianred1") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Elapsed",
y = "Density",
title = "Histogram of NHL Shots on Goal",
subtitle = "Seconds Elapsed") +
geom_vline(xintercept = c(1200, 2400, 3600), alpha = 0.5, lty = 2, size = 1.1) +
scale_x_continuous(breaks = seq(0, 3600, 600))
ggplot(shot.times, aes(x = time)) +
geom_histogram(breaks = seq(0, 3600, 60),
fill = "indianred1") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Elapsed",
y = "Density",
title = "Histogram of NHL Shots on Goal",
subtitle = "Seconds Elapsed") +
geom_vline(xintercept = c(1200, 2400, 3600), alpha = 0.5, lty = 2, size = 1.1) +
scale_x_continuous(breaks = seq(0, 3600, 600))
nrow(shot.times)
summary(as.factor(shot.times$event))
ggplot(filter(shot.times, event == "GOAL"), aes(x = time)) +
geom_histogram(breaks = seq(0, 3600, 60),
fill = "indianred1") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Seconds Elapsed",
y = "Density",
title = "Histogram of NHL Shots on Goal",
subtitle = "Seconds Elapsed") +
geom_vline(xintercept = c(1200, 2400, 3600), alpha = 0.5, lty = 2, size = 1.1) +
scale_x_continuous(breaks = seq(0, 3600, 600))
prior.shots <- filter(shot.data, season == 2017)
nb.fit <- glm.nb(shots ~ team + home, data = prior.shots)
nb.fit <- glm.nb(shots ~ 1, data = prior.shots)
summary(nb.fit)
predict(nb.fit)
predict(shot.data[1,], nb.fit, type = "response"
)
predict(c(1)), nb.fit, type = "response")
predict(c(1), nb.fit, type = "response")
predict(nb.fit, type = "response")[1]
nb.params
nb.fit <- glm.nb(shots ~ 1, data = shot.data)
nb.fit$theta
nb.fit$coefficients
nb.fit$theta / (exp(nb.fit$coefficients) + nb.fit$theta)
fitdistr(shot.data$shots, "negative binomial")
mean(shot.data$shots)
nb.mle <- fitdistr(shots, "negative binomial")
nb.mle$estimate
nb.mle$estimate[1]
nb.mle$estimate[1] / sum(nb.mle$estimate)
shot.p
nb.mle
shot.p <- nb.mle$estimate[1] / sum(nb.mle$estimate)
shot.r <- nb.params[1]
shot.x <- seq(min(shots), max(shots), by = 1)
shot.poisson <- dpois(shot.x, lambda = shot.mean)
shot.nb <- dnbinom(shot.x, prob = shot.p, size = shot.r)
shot.density <- data.frame(shot.x = shot.x, shot.poisson = shot.poisson, shot.nb = shot.nb)
ggplot(shot.data, aes(x = shots, y = ..density..)) +
geom_histogram(binwidth = 1,
center = 0,
col = "white",
fill = "skyblue") +
geom_point(data = shot.density, aes(x = shot.x, y = shot.nb),
col = "black",
size = 3) +
geom_line(data = shot.density, aes(x = shot.x, y = shot.nb),
col = "black",
size = 1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Shots On Goal",
y = "Density",
title = "Histogram of Regulation Shots On Goal",
subtitle = "Negative Binomial Distribution",
caption = "Data via MoneyPuck.com")
shot.nb
shot.x <- seq(min(shots), max(shots), by = 1)
shot.poisson <- dpois(shot.x, lambda = shot.mean)
shot.nb <- dnbinom(shot.x, prob = 1 - shot.p, size = shot.r)
shot.density <- data.frame(shot.x = shot.x, shot.poisson = shot.poisson, shot.nb = shot.nb)
shot.x <- seq(min(shots), max(shots), by = 1)
shot.poisson <- dpois(shot.x, lambda = shot.mean)
shot.nb <- dnbinom(shot.x, prob = shot.p, size = shot.r)
shot.density <- data.frame(shot.x = shot.x, shot.poisson = shot.poisson, shot.nb = shot.nb)
ggplot(shot.data, aes(x = shots, y = ..density..)) +
geom_histogram(binwidth = 1,
center = 0,
col = "white",
fill = "skyblue") +
geom_point(data = shot.density, aes(x = shot.x, y = shot.nb),
col = "black",
size = 3) +
geom_line(data = shot.density, aes(x = shot.x, y = shot.nb),
col = "black",
size = 1) +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.title = element_text(size = 14)) +
labs(x = "Shots On Goal",
y = "Density",
title = "Histogram of Regulation Shots On Goal",
subtitle = "Negative Binomial Distribution",
caption = "Data via MoneyPuck.com")
shot.p
shot.r
